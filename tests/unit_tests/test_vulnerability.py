# -*- coding: utf-8 -*-
import pytest
from src.models.package import Package
from src.models.cvss import CVSS
from src.models.vulnerability import Vulnerability


@pytest.fixture
def vuln_123():
    vuln = Vulnerability("CVE-123", "test", "test", "test")
    vuln.add_url("https://cve.com/123")
    vuln.add_text("CVE-123", "text1")
    vuln.add_text("same description in 123 and 789", "desc1")
    vuln.add_package("test@1.0.0")
    vuln.add_advisory("advisory 1")
    return vuln


@pytest.fixture
def pkg_test():
    pkg = Package("test", "1.0.0")
    pkg.generate_generic_cpe()
    pkg.generate_generic_purl()
    return pkg


@pytest.fixture
def cvss_critical():
    return CVSS("3.1", "AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "test", 9.8, 3.9, 5.1)


@pytest.fixture
def cvss_low():
    return CVSS("3.1", "AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "test", 3.1, 2.1, 1.1)


@pytest.fixture
def cvss_incomplete():
    return CVSS("3.1", "", "unknown", 3.1, 0.0, 0.0)


@pytest.fixture
def vuln_456(vuln_123, pkg_test):
    vuln = Vulnerability("CVE-456", "test", "test", "test")
    vuln.add_alias(vuln_123.id)
    vuln.add_related_vulnerability("CVE-000")
    vuln.add_url("https://cve.com/456")
    vuln.add_text("CVE-456", "text2")
    vuln.add_package(pkg_test)
    vuln.add_advisory("advisory 2")
    return vuln


@pytest.fixture
def vuln_789(vuln_456):
    vuln = Vulnerability("CVE-789", "test", "test", "test")
    vuln.add_alias(vuln_456.id)
    vuln.add_related_vulnerability("CVE-999")
    vuln.add_url("https://cve.com/789")
    vuln.add_text("CVE-789", "text1")
    vuln.add_text("same description in 123 and 789", "desc2")
    vuln.add_package("test@2.0.0")
    return vuln


def test_add_alias_and_related(vuln_123, vuln_456):
    """
    GIVEN a Vulnerability
    WHEN adding aliases and related vulnerabilities
    THEN check the aliases and related vulnerabilities are correctly set
    """
    assert "CVE-123" in vuln_456.aliases
    assert "CVE-000" in vuln_456.related_vulnerabilities
    vuln_123.merge(vuln_456)
    assert "CVE-456" in vuln_123.aliases
    assert "CVE-000" in vuln_123.related_vulnerabilities


def test_add_url(vuln_123, vuln_456):
    """
    GIVEN a Vulnerability
    WHEN adding URLs
    THEN check the URLs are correctly set
    """
    assert "https://cve.com/123" in vuln_123.urls
    vuln_123.merge(vuln_456)
    assert "https://cve.com/456" in vuln_123.urls


def test_add_text(vuln_123, vuln_456, vuln_789):
    """
    GIVEN a Vulnerability
    WHEN adding texts
    THEN check the texts are correctly set
    """
    assert vuln_123.texts["text1"] == "CVE-123"
    assert vuln_123.merge(vuln_456) is True
    assert vuln_123.texts["text1"] == "CVE-123"
    assert vuln_123.texts["text2"] == "CVE-456"

    assert "CVE-456" in vuln_123.aliases
    assert vuln_123.merge(vuln_789) is True
    assert "CVE-123" in vuln_123.texts.values()
    assert "CVE-789" in vuln_123.texts.values()

    vuln_123.add_text("demo", "text1")
    assert "CVE-123" in vuln_123.texts["text1"]
    assert "demo" in vuln_123.texts["text1"]


def test_deduplicate_texts(vuln_123, vuln_456, vuln_789):
    """
    GIVEN a Vulnerability
    WHEN merging together with same text multiple times
    THEN check the texts are deduplicated
    """
    assert vuln_123.merge(vuln_456) is True
    assert vuln_123.merge(vuln_789) is True

    # XOR: text present only one time
    assert bool("desc1" in vuln_123.texts) != bool("desc2" in vuln_123.texts)
    assert "same description in 123 and 789" in vuln_123.texts.values()
    assert list(vuln_123.texts.values()).count("same description in 123 and 789") == 1


def test_add_packages(vuln_123):
    """
    GIVEN a Vulnerability and packages
    WHEN adding packages to the vulnerability
    THEN check the packages list are correctly set
    """
    assert "test@1.0.0" in vuln_123
    assert vuln_123.add_package("test@2.0.0") is True
    assert vuln_123.add_package("test@1.0.0") is False
    assert len(vuln_123.packages) == 2


def test_add_fix_status(vuln_123, vuln_456):
    """
    GIVEN a Vulnerability
    WHEN adding fix status
    THEN check the fix status is correctly set
    """
    vuln_123
    assert vuln_123.fix["state"] == "unknown"
    vuln_456.set_fix_state("fixed")
    vuln_123.merge(vuln_456)
    assert vuln_123.fix["state"] == "fixed"


def test_add_advisory(vuln_123, vuln_456):
    """
    GIVEN a Vulnerability
    WHEN adding advisories
    THEN check the advisories are correctly set
    """
    assert len(vuln_123.advisories) == 1
    vuln_123.merge(vuln_456)
    assert len(vuln_123.advisories) == 2
    assert "advisory 1" in vuln_123.advisories


def test_register_cvss(vuln_123, vuln_456, cvss_critical, cvss_low, cvss_incomplete):
    """
    GIVEN a Vulnerability
    WHEN registering CVSS scores
    THEN check the CVSS scores are correctly set
    """
    vuln_123.register_cvss(cvss_critical)
    vuln_123.register_cvss(cvss_incomplete)
    assert len(vuln_123.severity["cvss"]) == 2

    vuln_456.register_cvss(cvss_low)
    vuln_456.register_cvss(cvss_incomplete)
    assert len(vuln_456.severity["cvss"]) == 1

    vuln_123.merge(vuln_456)
    assert len(vuln_123.severity["cvss"]) == 2

    assert cvss_critical in vuln_123.severity["cvss"]
    assert cvss_low in vuln_456.severity["cvss"]
    assert vuln_123.severity["min_score"] == 3.1
    assert vuln_123.severity["max_score"] == 9.8
    assert vuln_123.severity["severity"] == "critical"
    for cvss in vuln_123.severity["cvss"]:
        assert cvss.author == "test"


def test_severity_without_cvss(vuln_123, vuln_456, vuln_789):
    """
    GIVEN a Vulnerability
    WHEN setting severity without CVSS
    THEN check the severity is correctly set
    """
    vuln_123.severity_without_cvss("high", 7.2)
    assert vuln_123.severity["severity"] == "high"
    assert vuln_123.severity["min_score"] == 7.2
    assert vuln_123.severity["max_score"] == 7.2

    vuln_123.severity_without_cvss("low", 3.1, True)
    assert vuln_123.severity["severity"] == "low"
    assert vuln_123.severity["min_score"] == 3.1
    assert vuln_123.severity["max_score"] == 7.2

    vuln_456.severity_without_cvss("critical", 10.0)
    vuln_123.merge(vuln_456)
    assert vuln_123.severity["severity"] == "critical"
    assert vuln_123.severity["min_score"] == 3.1
    assert vuln_123.severity["max_score"] == 10.0

    vuln_789.severity_without_cvss("low", 1.1)
    vuln_123.merge(vuln_789)
    assert vuln_123.severity["severity"] == "critical"
    assert vuln_123.severity["min_score"] == 1.1
    assert vuln_123.severity["max_score"] == 10.0

    vuln_123.severity_without_cvss("medium", 5.0)
    assert vuln_123.severity["severity"] == "critical"
    assert vuln_123.severity["min_score"] == 1.1
    assert vuln_123.severity["max_score"] == 10.0


def test_export_import_vulnerability(vuln_456):
    """
    GIVEN a Vulnerability
    WHEN exporting and importing the Vulnerability
    THEN check the Vulnerability is correctly exported and imported
    """
    imported = Vulnerability.from_dict(vuln_456.to_dict())
    assert vuln_456.id == imported.id
    assert vuln_456.aliases[0] == imported.aliases[0]
    assert vuln_456.related_vulnerabilities[0] == imported.related_vulnerabilities[0]
    assert vuln_456.urls[0] == imported.urls[0]
    assert vuln_456.texts["text2"] == imported.texts["text2"]
    assert vuln_456.packages[0] == imported.packages[0]
    assert vuln_456.advisories[0] == imported.advisories[0]


def test_merge_vulnerabilities_not_compatible(vuln_123, vuln_789):
    """
    GIVEN two vulnerabilities with different ids
    WHEN merging the vulnerabilities
    THEN check the vulnerabilities are not compatible
    """
    assert vuln_123.merge(vuln_789) is False
    assert len(vuln_123.aliases) == 0
